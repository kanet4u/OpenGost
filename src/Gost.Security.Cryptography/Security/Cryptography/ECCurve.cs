using System;
using System.Diagnostics.CodeAnalysis;
using System.Security.Cryptography;

namespace Gost.Security.Cryptography
{
    using static SecurityCryptographyStrings;

    /// <summary>
    /// An elliptic curve. Supports explicit elliptic curves only.
    /// </summary>
    [Serializable]
    [SuppressMessage("Microsoft.Performance", "CA1815:OverrideEqualsAndOperatorEqualsOnValueTypes")]
    public struct ECCurve
    {
        /// <summary>
        /// The prime specifying the base field.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        public byte[] Prime;

        /// <summary>
        /// Coefficient A.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        public byte[] A;

        /// <summary>
        /// Coefficient B.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        public byte[] B;

        /// <summary>
        /// Base Point.
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        public ECPoint G;

        /// <summary>
        /// Order of the group generated by G = (x,y).
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        public byte[] Order;

        /// <summary>
        /// Cofactor (optional).
        /// </summary>
        [SuppressMessage("Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields")]
        public byte[] Cofactor;

        /// <summary>
        /// Validate the current curve.
        /// </summary>
        /// <exception cref="CryptographicException">
        /// The curve parameters are not valid.
        /// </exception>
        public void Validate()
        {
            bool hasErrors = false;

            if (Prime == null)
                hasErrors = true;
            else
            {
                int length = Prime.Length;

                byte[] x = G.X, y = G.Y;

                if (A == null || A.Length != length ||
                    B == null || B.Length != length ||
                    x == null || x.Length != length ||
                    y == null || y.Length != length ||
                    Order == null || Order.Length == 0 ||
                    Cofactor == null || Cofactor.Length == 0)
                {
                    hasErrors = true;
                }
            }

            if (hasErrors)
                throw new CryptographicException(CryptographicInvalidECCurve);
        }
    }
}